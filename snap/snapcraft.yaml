name: polkadot
base: core22
adopt-info: polkadot
summary: Polkadot - A multi-chain framework for better blockchain interoperability
contact: polkadot-devel@dwellir.com
issues: https://github.com/dwellir-public/snap-polkadot/issues
source-code: https://github.com/dwellir-public/snap-polkadot/
website: https://www.dwellir.com
grade: devel
confinement: strict

description: |
  Polkadot is a multi-chain framework that enables interoperability and scalability for multiple blockchains.
  See: https://github.com/paritytech/polkadot

  This snap is maintained by Dwellir https://www.dwellir.com

parts:

  install-wasm-toolchain:
    plugin: nil
    override-build: |
      rustup default stable
      rustup target add wasm32-unknown-unknown
      rustup update
      cargo install wasm-pack --version 0.11.1

  polkadot:
    after: [install-wasm-toolchain]
    plugin: rust
    source: https://github.com/paritytech/polkadot.git
    source-tag: v0.9.43
    source-depth: 1
    build-environment:
      - CARGO_PROFILE_RELEASE_BUILD_OVERRIDE: "--release"
      - RUSTUP_TOOLCHAIN: stable
      - RUSTUP_TARGET: wasm32-unknown-unknown
    build-packages:
      - build-essential
      - libssl-dev
      - git 
      - clang 
      - libclang-dev 
      - pkg-config
      - protobuf-compiler
      # -curl      
    build-snaps:
      - rustup
    # Make the commit hash available for snap info
    override-pull: |
      craftctl default
      craftctl set version="$(git describe --tags --abbrev=10)-$(git rev-parse --short HEAD)"
    override-build: |
      # TODO in theory this plus build-packages should be enough before building but we need the steps in install-wasm-toolchain for some reason.
      ./scripts/init.sh
      # Build main binary using build function of plugin
      snapcraftctl build
      # Building wasm runtime binaries with tracing capabilities
      cargo build --release --features frame-executive/with-tracing,sp-io/with-tracing --manifest-path runtime/westend/Cargo.toml
      cargo build --release --features frame-executive/with-tracing,sp-io/with-tracing --manifest-path runtime/rococo/Cargo.toml
      cargo build --release --features frame-executive/with-tracing,sp-io/with-tracing --manifest-path runtime/polkadot/Cargo.toml
      cargo build --release --features frame-executive/with-tracing,sp-io/with-tracing --manifest-path runtime/kusama/Cargo.toml
      mkdir -p ${CRAFT_PART_INSTALL}/{westend-runtime-with-traces,rococo-runtime-with-traces,polkadot-runtime-with-traces,kusama-runtime-with-traces}
      # Use compact.compressed version of wasm runtimes. All versions seems to work and this one is smallest in size.
      cp target/release/wbuild/westend-runtime/westend_runtime.compact.compressed.wasm ${CRAFT_PART_INSTALL}/westend-runtime-with-traces/
      cp target/release/wbuild/rococo-runtime/rococo_runtime.compact.compressed.wasm ${CRAFT_PART_INSTALL}/rococo-runtime-with-traces/
      cp target/release/wbuild/polkadot-runtime/polkadot_runtime.compact.compressed.wasm ${CRAFT_PART_INSTALL}/polkadot-runtime-with-traces/
      cp target/release/wbuild/kusama-runtime/kusama_runtime.compact.compressed.wasm ${CRAFT_PART_INSTALL}/kusama-runtime-with-traces/
    prime:
      - westend-runtime-with-traces/
      - rococo-runtime-with-traces/
      - polkadot-runtime-with-traces/
      - kusama-runtime-with-traces/

# This step depends on polkadot - so all environment for rust should already have been set.
# Not repeating this here.

  # runtimes-with-tracing:
  #   plugin: rust
  #   source: https://github.com/paritytech/polkadot.git
  #   source-tag: v0.9.43
  #   build-environment:
  #     - RUSTUP_TOOLCHAIN: stable
  #     - RUSTUP_TARGET: wasm32-unknown-unknown
  #   override-build: |
  #      set -ex
  #      mkdir -p ${CRAFT_PART_INSTALL}/{westend-runtime-with-traces,rococo-runtime-with-traces,polkadot-runtime-with-traces,kusama-runtime-with-traces}
  #      cargo build --release --features frame-executive/with-tracing,sp-io/with-tracing --manifest-path runtime/westend/Cargo.toml
  #      cargo build --release --features frame-executive/with-tracing,sp-io/with-tracing --manifest-path runtime/rococo/Cargo.toml
  #      cargo build --release --features frame-executive/with-tracing,sp-io/with-tracing --manifest-path runtime/polkadot/Cargo.toml
  #      cargo build --release --features frame-executive/with-tracing,sp-io/with-tracing --manifest-path runtime/kusama/Cargo.toml
  #      # ship one of the runtimes built. There are more, but only ship the compact.
  #      cp target/release/wbuild/westend-runtime/westend_runtime.compact.wasm ${CRAFT_PART_INSTALL}/westend-runtime-with-traces/
  #      cp target/release/wbuild/rococo-runtime/rococo_runtime.compact.wasm ${CRAFT_PART_INSTALL}/rococo-runtime-with-traces/
  #      cp target/release/wbuild/polkadot-runtime/polkadot_runtime.compact.wasm ${CRAFT_PART_INSTALL}/polkadot-runtime-with-traces/
  #      cp target/release/wbuild/kusama-runtime/kusama_runtime.compact.wasm ${CRAFT_PART_INSTALL}/kusama-runtime-with-traces/
  #   prime:
  #     - westend-runtime-with-traces/
  #     - rococo-runtime-with-traces/
  #     - polkadot-runtime-with-traces/
  #     - kusama-runtime-with-traces/
  #   after: [polkadot, install-wasm-toolchain]

  wrappers:
    plugin: dump
    source-type: local
    source: .
    stage:
      - wrappers/

apps:
  polkadot:
    command: wrappers/start-polkadot.sh $SNAP_DATA/service-arguments
    daemon: simple
    install-mode: disable
    refresh-mode: endure
    restart-condition: never
    plugs:
      - network
      - network-bind
    environment:
      LC_ALL: C.UTF-8
      LANG: C.UTF-8

#plugs:
#  network:
#  network-bind:

